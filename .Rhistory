gbr <- gb*f
glr <- gl*f
#---------------------------Mittlere Sonnenzeit
t <- ut+gl/15.           # In Stunden
#---------------------------Stundenwinkel in Radiant
m <- 356.6+0.9856*n      # in Grad
m <- m*f                 # in Radiant
zt <- 0.1644*sin(2.*glr) - 0.1277*sin(m) # in Stunden
h <- (15.*f)*(t+zt-12.)  # In Radiant
#---------------------------Scheinb. geoz etc.
del <- 279.3*f+0.9856*f*n+1.92*f*sin(356.6*f+0.9856*f*n) #  in Radiant
#      del=del*f             #  in Radiant
#---------------------------Sinus Deklination der Sonne
sde <- sin(23.44*f)*sin(del)     #  In Radiant
saz=(sde*cos(gbr)-cos(asin(sde))*sin(gbr)*cos(h))/cos(shh)
saz=acos(saz)
saz <- saz/f;
library(lubridate)
library(dplyr)
source("../00_Toolbox/solar_IR_rad_functions.R")
radiation_data <- read.csv("../03_Sitzung_3/testdatensatz_radbilanz_wiese_caldern.csv") %>%
na.omit()
################# Notwendige Eingaben Atmosphäre
solconst <- 1367            # Mean solar constatnt W/m²
p <- 1000                   # Air pressure in hPa; wenn bekannt, angeben; sonst unten berechnen
oz <- 0.35                  # average Ozon columnar values 0.35 cm
t <- 20.8                   # Temperatur in °C
vis <- 40                   # horizontale Sichtweite in km
################### Notwendige Eingaben Ort und Zeit
gb <- 50.84050277777778
gl <- 8.683303333333333
################## Eingaben Gelaende
h  <- 200           # Gelaendehoehe in m
sky <- 0.8          # Himmelssichtfaktor (sky view factor 0..1); 1, wenn keine Horizontueberschattung; wenn nicht bekannt, rechnen
hex <- 180          # Expositionswinkel 0 = N, 180° = S
hn <- 20            # Hangneigung in Grad (0...90°)
albedo <- 0.15      # Albedo in 0...1
everything <- radiation_data %>%
mutate(
date = dmy_hm(datetime, tz = "Europe/Berlin"),
ut = hour(date)+minute(date)/60+second(date)/3600,
sh = sh(yday(date), ut, gb, gl),
pressure = pp(Ta_2m, h),
exz = exz(yday(date)),
saz = saz(yday(date), ut, gb, gl),
mr = mr(sh),
ma = ma(mr, pressure),
tlu = tlu(ma),
to3 = to3(mr, oz),
pw = pw(pressure,Ta_2m,h),
twv = twv(pw, mr),
tae = tae(vis, ma),
tgas = tgas(ma),
tges = tlu*to3*tgas*tae*twv,
sol_90 = solconst*exz,
sol_sh = sol_90 * sin(sh*(pi/180)),
sol_hor = sol_sh * tges,
sol_ref = albedo * sol_hor,
sol_bal = sol_hor - sol_ref,
)
View(everything)
yday(everything$date)
n <- 185
ut <- 4.25
gb <- 50.84050277777778
gl <- 8.683303333333333
f <- pi/180
everything <- radiation_data %>%
mutate(
date = dmy_hm(datetime, tz = "Europe/Berlin"),
ut = hour(date)+minute(date)/60+second(date)/3600,
sh = sh(yday(date), ut, gb, gl),
pressure = pp(Ta_2m, h),
exz = exz(yday(date)),
saz = saz(yday(date), ut, gb, gl, sh*f),
mr = mr(sh),
ma = ma(mr, pressure),
tlu = tlu(ma),
to3 = to3(mr, oz),
pw = pw(pressure,Ta_2m,h),
twv = twv(pw, mr),
tae = tae(vis, ma),
tgas = tgas(ma),
tges = tlu*to3*tgas*tae*twv,
sol_90 = solconst*exz,
sol_sh = sol_90 * sin(sh*(pi/180)),
sol_hor = sol_sh * tges,
sol_ref = albedo * sol_hor,
sol_bal = sol_hor - sol_ref,
)
radiation_data <- read.csv("../03_Sitzung_3/testdatensatz_radbilanz_wiese_caldern.csv") %>%
na.omit()
################# Notwendige Eingaben Atmosphäre
solconst <- 1367            # Mean solar constatnt W/m²
p <- 1000                   # Air pressure in hPa; wenn bekannt, angeben; sonst unten berechnen
oz <- 0.35                  # average Ozon columnar values 0.35 cm
t <- 20.8                   # Temperatur in °C
vis <- 40                   # horizontale Sichtweite in km
################### Notwendige Eingaben Ort und Zeit
gb <- 50.84050277777778
gl <- 8.683303333333333
################## Eingaben Gelaende
h  <- 200           # Gelaendehoehe in m
sky <- 0.8          # Himmelssichtfaktor (sky view factor 0..1); 1, wenn keine Horizontueberschattung; wenn nicht bekannt, rechnen
hex <- 180          # Expositionswinkel 0 = N, 180° = S
hn <- 20            # Hangneigung in Grad (0...90°)
albedo <- 0.15      # Albedo in 0...1
f <- pi/180
everything <- radiation_data %>%
mutate(
date = dmy_hm(datetime, tz = "Europe/Berlin"),
ut = hour(date)+minute(date)/60+second(date)/3600,
sh = sh(yday(date), ut, gb, gl),
pressure = pp(Ta_2m, h),
exz = exz(yday(date)),
saz = saz(yday(date), ut, gb, gl, (sh*f)),
mr = mr(sh),
ma = ma(mr, pressure),
tlu = tlu(ma),
to3 = to3(mr, oz),
pw = pw(pressure,Ta_2m,h),
twv = twv(pw, mr),
tae = tae(vis, ma),
tgas = tgas(ma),
tges = tlu*to3*tgas*tae*twv,
sol_90 = solconst*exz,
sol_sh = sol_90 * sin(sh*(pi/180)),
sol_hor = sol_sh * tges,
sol_ref = albedo * sol_hor,
sol_bal = sol_hor - sol_ref,
)
### Function Sonnenazimuth
saz <- function(n,ut,gb,gl, shh) {
f <- pi/180   # Winkel in Radiant Faktor
gbr <- gb*f
glr <- gl*f
#---------------------------Mittlere Sonnenzeit
t <- ut+gl/15.           # In Stunden
#---------------------------Stundenwinkel in Radiant
m <- 356.6+0.9856*n      # in Grad
m <- m*f                 # in Radiant
zt <- 0.1644*sin(2.*glr) - 0.1277*sin(m) # in Stunden
h <- (15.*f)*(t+zt-12.)  # In Radiant
#---------------------------Scheinb. geoz etc.
del <- 279.3*f+0.9856*f*n+1.92*f*sin(356.6*f+0.9856*f*n) #  in Radiant
#      del=del*f             #  in Radiant
#---------------------------Sinus Deklination der Sonne
sde <- sin(23.44*f)*sin(del)     #  In Radiant
#---------------------------Sonnenazimut
if(t <= 12) {
saz=(sde*cos(gbr)-cos(asin(sde))*sin(gbr)*cos(h))/cos(shh)
saz=acos(saz)
} else {
saz=(sde*cos(gbr)-cos(asin(sde))*sin(gbr)*cos(h))/cos(shh)
saz=360.*f-acos(saz) }
saz <- saz/f;
return(saz)
}
radiation_data <- read.csv("../03_Sitzung_3/testdatensatz_radbilanz_wiese_caldern.csv") %>%
na.omit()
################# Notwendige Eingaben Atmosphäre
solconst <- 1367            # Mean solar constatnt W/m²
p <- 1000                   # Air pressure in hPa; wenn bekannt, angeben; sonst unten berechnen
oz <- 0.35                  # average Ozon columnar values 0.35 cm
t <- 20.8                   # Temperatur in °C
vis <- 40                   # horizontale Sichtweite in km
################### Notwendige Eingaben Ort und Zeit
gb <- 50.84050277777778
gl <- 8.683303333333333
################## Eingaben Gelaende
h  <- 200           # Gelaendehoehe in m
sky <- 0.8          # Himmelssichtfaktor (sky view factor 0..1); 1, wenn keine Horizontueberschattung; wenn nicht bekannt, rechnen
hex <- 180          # Expositionswinkel 0 = N, 180° = S
hn <- 20            # Hangneigung in Grad (0...90°)
albedo <- 0.15      # Albedo in 0...1
f <- pi/180
everything <- radiation_data %>%
mutate(
date = dmy_hm(datetime, tz = "Europe/Berlin"),
ut = hour(date)+minute(date)/60+second(date)/3600,
sh = sh(yday(date), ut, gb, gl),
pressure = pp(Ta_2m, h),
exz = exz(yday(date)),
saz = saz(yday(date), ut, gb, gl, (sh*f)),
mr = mr(sh),
ma = ma(mr, pressure),
tlu = tlu(ma),
to3 = to3(mr, oz),
pw = pw(pressure,Ta_2m,h),
twv = twv(pw, mr),
tae = tae(vis, ma),
tgas = tgas(ma),
tges = tlu*to3*tgas*tae*twv,
sol_90 = solconst*exz,
sol_sh = sol_90 * sin(sh*(pi/180)),
sol_hor = sol_sh * tges,
sol_ref = albedo * sol_hor,
sol_bal = sol_hor - sol_ref,
)
?ifelse
### Function Sonnenazimuth
saz <- function(n,ut,gb,gl, shh) {
f <- pi/180   # Winkel in Radiant Faktor
gbr <- gb*f
glr <- gl*f
#---------------------------Mittlere Sonnenzeit
t <- ut+gl/15.           # In Stunden
#---------------------------Stundenwinkel in Radiant
m <- 356.6+0.9856*n      # in Grad
m <- m*f                 # in Radiant
zt <- 0.1644*sin(2.*glr) - 0.1277*sin(m) # in Stunden
h <- (15.*f)*(t+zt-12.)  # In Radiant
#---------------------------Scheinb. geoz etc.
del <- 279.3*f+0.9856*f*n+1.92*f*sin(356.6*f+0.9856*f*n) #  in Radiant
#      del=del*f             #  in Radiant
#---------------------------Sinus Deklination der Sonne
sde <- sin(23.44*f)*sin(del)     #  In Radiant
#---------------------------Sonnenazimut
saz <- (sde*cos(gbr)-cos(asin(sde))*sin(gbr)*cos(h))/cos(shh)
saz <- ifelse(t <=12, acos(saz), 360*f-acos(saz))
saz <- saz/f
return(saz)
}
radiation_data <- read.csv("../03_Sitzung_3/testdatensatz_radbilanz_wiese_caldern.csv") %>%
na.omit()
################# Notwendige Eingaben Atmosphäre
solconst <- 1367            # Mean solar constatnt W/m²
p <- 1000                   # Air pressure in hPa; wenn bekannt, angeben; sonst unten berechnen
oz <- 0.35                  # average Ozon columnar values 0.35 cm
t <- 20.8                   # Temperatur in °C
vis <- 40                   # horizontale Sichtweite in km
################### Notwendige Eingaben Ort und Zeit
gb <- 50.84050277777778
gl <- 8.683303333333333
################## Eingaben Gelaende
h  <- 200           # Gelaendehoehe in m
sky <- 0.8          # Himmelssichtfaktor (sky view factor 0..1); 1, wenn keine Horizontueberschattung; wenn nicht bekannt, rechnen
hex <- 180          # Expositionswinkel 0 = N, 180° = S
hn <- 20            # Hangneigung in Grad (0...90°)
albedo <- 0.15      # Albedo in 0...1
f <- pi/180
everything <- radiation_data %>%
mutate(
date = dmy_hm(datetime, tz = "Europe/Berlin"),
ut = hour(date)+minute(date)/60+second(date)/3600,
sh = sh(yday(date), ut, gb, gl),
pressure = pp(Ta_2m, h),
exz = exz(yday(date)),
saz = saz(yday(date), ut, gb, gl, (sh*f)),
mr = mr(sh),
ma = ma(mr, pressure),
tlu = tlu(ma),
to3 = to3(mr, oz),
pw = pw(pressure,Ta_2m,h),
twv = twv(pw, mr),
tae = tae(vis, ma),
tgas = tgas(ma),
tges = tlu*to3*tgas*tae*twv,
sol_90 = solconst*exz,
sol_sh = sol_90 * sin(sh*(pi/180)),
sol_hor = sol_sh * tges,
sol_ref = albedo * sol_hor,
sol_bal = sol_hor - sol_ref,
)
usethis::use_r("radiation")
az <- c(0,45,90,135,180,225,270,315)
th <- c(25, 30, 30, 11, 12, 17, 15 ,10)
dist <- c(154.6, 84.5, 64.0, 47.7, 66.7, 55.6, 34.0, 32.0)
nl <- length(az)
az <- c(0,45,90,135,180,225,270,315)
th <- c(25, 30, 30, 11, 12, 17, 15 ,10)
dist <- c(154.6, 84.5, 64.0, 47.7, 66.7, 55.6, 34.0, 32.0)
nl <- length(az)
s_al <- vector(mode="numeric", length = nl)
sky_vaz <- vector(mode="numeric", length = nl)
s_al <- asin(th/dist)   # sin(alpha) nach Pythagoras
az <- c(0,45,90,135,180,225,270,315)
th <- c(25, 30, 30, 11, 12, 17, 15 ,10)
dist <- c(154.6, 84.5, 64.0, 47.7, 66.7, 55.6, 34.0, 32.0)
nl <- length(az)
s_al <- asin(th/dist)   # sin(alpha) nach Pythagoras
sky_vaz <- (1-cos(s_al))
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
?lw_emissivity_air
usethis
usethis::use_r("latent")
usethis::use_r("sensible")
devtools::load_all()
surface_properties
#' "Wiese", "Acker", "Gruenflaeche", "Strasse", "Landwirtschaft", "Siedlung", "Nadelwald", "Laubwald", "Mischwald", "Stadt"
#' You need to specify only one, "type" OR "obs_height".
#'
#' @param surface_type Type of underground.
#' @param obs_height Height of obstacle in m.
#'
#' @return Roughness length in m.
#' @export
#'
#' @examples
turb_roughness_length <- function(surface_type = NULL, obs_height = NULL){
if(is.null(obs_height)==F){z0 <- obs_height*0.1}
else if(is.null(surface_type)==F && is.null(obs_height)){
z0 <- surface_properties[surface_type==surface_type]$roughness_length
}
else if(is.null(surface_type)==F && is.null(obs_height)==F){z0 <- NA}
if((is.null(surface_type) && is.null(obs_height)) || (is.null(surface_type)==F && is.null(obs_height)==F)){
return("Please specify the type of the surface OR the obs_height")
}
if(is.null(surface_type)==F){
if(type == "Wiese" || type == "Weide"){z0 = 0.02}
else if(type == "Acker" || type == "Sportplatz"){z0 = 0.05}
else if(type == "Strasse" || type == "Gruenflaeche" || type == "Landwirtschaft"){z0 = 0.2}
else if(type == "Siedlung" || type == "Nadelwald"){z0 = 1.0}
else if(type == "Laubwald" || type == "Mischwald"){z0 = 1.5}
else if(type == "Stadt"){z0 = 2.0}}
else if(is.null(obs_height)==F){z0 <- obs_height*0.1}
return(z0)
}
if(is.null(obs_height)==F){z0 <- obs_height*0.1}
#' "Wiese", "Acker", "Gruenflaeche", "Strasse", "Landwirtschaft", "Siedlung", "Nadelwald", "Laubwald", "Mischwald", "Stadt"
#' You need to specify only one, "type" OR "obs_height".
#'
#' @param surface_type Type of underground.
#' @param obs_height Height of obstacle in m.
#'
#' @return Roughness length in m.
#' @export
#'
#' @examples
turb_roughness_length <- function(surface_type = NULL, obs_height = NULL){
if(is.null(obs_height)==F){z0 <- obs_height*0.1}
else if(is.null(surface_type)==F && is.null(obs_height)){
z0 <- surface_properties[surface_type==surface_type]$roughness_length
}
else if(is.null(surface_type)==F && is.null(obs_height)==F){z0 <- NA}
}
turb_roughness_length("Wiese")
#' "Wiese", "Acker", "Gruenflaeche", "Strasse", "Landwirtschaft", "Siedlung", "Nadelwald", "Laubwald", "Mischwald", "Stadt"
#' You need to specify only one, "type" OR "obs_height".
#'
#' @param surface_type Type of underground.
#' @param obs_height Height of obstacle in m.
#'
#' @return Roughness length in m.
#' @export
#'
#' @examples
turb_roughness_length <- function(surface_type = NULL, obs_height = NULL){
if(is.null(obs_height)==F){z0 <- obs_height*0.1}
else if(is.null(surface_type)==F && is.null(obs_height)){
z0 <- surface_properties[surface_type==surface_type]$roughness_length
}
else if(is.null(surface_type)==F && is.null(obs_height)==F){z0 <- NA}
return(z0)
}
turb_roughness_length("Wiese")
z0 <- surface_properties[surface_properties$surface_type==surface_type]$roughness_length
#' "Wiese", "Acker", "Gruenflaeche", "Strasse", "Landwirtschaft", "Siedlung", "Nadelwald", "Laubwald", "Mischwald", "Stadt"
#' You need to specify only one, "type" OR "obs_height".
#'
#' @param surface_type Type of underground.
#' @param obs_height Height of obstacle in m.
#'
#' @return Roughness length in m.
#' @export
#'
#' @examples
turb_roughness_length <- function(surface_type = NULL, obs_height = NULL){
if(is.null(obs_height)==F){z0 <- obs_height*0.1}
else if(is.null(surface_type)==F && is.null(obs_height)){
z0 <- surface_properties[surface_properties$surface_type==surface_type]$roughness_length
}
else if(is.null(surface_type)==F && is.null(obs_height)==F){z0 <- NA}
return(z0)
}
turb_roughness_length("Wiese")
turb_roughness_length(surface_type = "Wiese")
surface_type <- "Wiese"
surface_properties[surface_properties$surface_type==surface_type]$roughness_length
surface_properties[surface_properties$surface_type=="Wiese"]$roughness_length
surface_properties[which(surface_properties$surface_type==surface_type),]$roughness_length
#' "Wiese", "Acker", "Gruenflaeche", "Strasse", "Landwirtschaft", "Siedlung", "Nadelwald", "Laubwald", "Mischwald", "Stadt"
#' You need to specify only one, "type" OR "obs_height".
#'
#' @param surface_type Type of underground.
#' @param obs_height Height of obstacle in m.
#'
#' @return Roughness length in m.
#' @export
#'
#' @examples
turb_roughness_length <- function(surface_type = NULL, obs_height = NULL){
if(is.null(obs_height)==F){z0 <- obs_height*0.1}
else if(is.null(surface_type)==F && is.null(obs_height)){
z0 <- surface_properties[which(surface_properties$surface_type==surface_type),]$roughness_length
}
else if(is.null(surface_type)==F && is.null(obs_height)==F){z0 <- NA}
return(z0)
}
rm(surfa#e)
rm(surface_type)
turb_roughness_length("Wiese")
turb_roughness_length("Stadt")
turb_roughness_length("Stadt", 2)
turb_roughness_length(2)
turb_roughness_length(obs_height = 2)
surface_properties[,"surface_type"]
test <- surface_properties[,"surface_type"]
devtools::load_all()
surface_properties
devtools::load_all()
devtools::document()
surface_properties
surface_type = "wiese"
emissivity_surface <- surface_properties[surface_type,]$emmisivity
surface_properties[surface_type,]$surface_type
emissivity_surface <- surface_properties[which(surface_properties$surface_type==surface_type),]$emmisivity
emissivity_surface <- surface_properties[which(surface_properties$surface_type==surface_type),]$emisivity
emissivity_surface <- surface_properties[which(surface_properties$surface_type==surface_type),]
surface_properties[which(surface_properties$surface_type==surface_type),]
which(surface_properties$surface_type==surface_type)
surface_type = wiese
emissivity_surface <- surface_properties[which(surface_properties$surface_type==as.factor(surface_type)),]
surface_properties$surface_type
monthly_climate <- function(data,
datetime,
t1,
t2,
z1 = 2,
z2 = 10,
v1,
v2,
hum1,
hum2,
rad_bal = NULL,
soil_flux,
p = NULL,
elev = 270,
lat = 8.683303333333333,
alt = 50.84050277777778,
surface_type = "Wiese",
obs_height = 0.3,
albedo
){
t1 <- data[,t1]
t2 <- data[,t2]
v1 <- data[,v1]
v2 <- data[,v2]
z1 <- data[,z1]
z2 <- data[,z2]
rad_bal <- data[,rad_bal]
soil_flux <- data[,soil_flux]
hum1 <- data[,hum1]
hum2 <- data[,hum2]
#roughness length
z0 <- turb_roughness_length(surface_type,obs_height)
#displacement height
d0 <- turb_displacement(obs_height)
#friction velocity
ustar <- turb_ustar(v1,z1,z0)
#pressure
if(is.null(p)){p1 <- pres_p((elev+z1),t1)}
else if(is.null(p)==F){p1 <- p}
p2 <- pres_p((elev+z2),t2)
#air density
air_density <- pres_air_density(p1,t1)
#Gradient-Richardson-Number ##in Ausgabe
grad_rich_no <- turb_flux_grad_rich_no(t1,t2,z1,z2,v1,v2,p1,p2)
#stability ##in Ausgabe
stability <- turb_flux_stability(grad_rich_no)
#Monin-Obhukov-Length ##in Ausgabe
monin <- turb_flux_monin(stability,z1,z2,z0,v1,v2,t1,t2,ustar)
#exchange quotient
ex_quotient <- turb_flux_ex_quotient_imp(stability,ustar,monin,z1,air_density)
#turbulent impulse exchange ##in Ausgabe
turb_flux <- turb_flux_imp_exchange(ex_quotient,v1,v2,z1,z2)
##################################################################################################
rad_sw_toa <- rad_sw_toa(datetime,lat,lon)
sol_elevation <- sol_elevation(datetime,lat,lon)
trans_total <- trans_total(sol_elevation,t1,elev,pressure = p)
rad_sw_ground_horizontal <- rad_sw_ground_horizontal(rad_sw_toa, trans_total)
rad_sw_reflected <- rad_sw_reflected(rad_sw_ground_horizontal, albedo)
rad_sw_radiation_balance <- rad_sw_radiation_balance(rad_sw_ground_horizontal,rad_sw_reflected)
emissivity_surface <- surface_properties[which(surface_properties$surface_type==as.factor(surface_type)),]
rad_lw_surface <- rad_lw_surface(t1,emissivity_surface)
if(is.null(radbal)){
radbal <- rad_bal_total(rad_sw_radiation_balance,rad_lw_surface,rad_lw_atmospheric)
}
#Latent Heat Priestley-Taylor Method
latent_priestley_taylor <- latent_priestley_taylor(t1,rad_bal,soil_flux)
#Latent Heat Penman Method
latent_penman <- latent_penman(datetime,v1,t1,hum1,z1,rad_bal,elev,lat)
#Latent Heat using Monin-Obukhov length ##### Eingangsvariablen anpassen ####
latent_monin <- latent_monin()
#Latent Heat using Bowen Method
latent_bowen <- latent_bowen()
#Sensible Heat Priestley-Taylor Method  #### Eingangsvariablen anpassen ####
sensible_priestley_taylor <- sensible_priestley_taylor()
#Sensible Heat using Monin-Obukhov length #### Eingangsvariablen anpassen ####
sensible_monin <- sensible_monin()
#Sensible Heat using Bowen Method #### Eingangsvariablen anpassen ####
sensible_bowen <- sensible_bowen()
}
emissivity_surface <- surface_properties[which(surface_properties$surface_type==surface_type),]
surface_properties[which(surface_properties$surface_type==surface_type),]
surface_properties[which(surface_properties$surface_type==as.factor(surface_type)),]
