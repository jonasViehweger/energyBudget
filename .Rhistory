################### Notwendige Eingaben Ort und Zeit
gb <- 50.84050277777778
gl <- 8.683303333333333
################## Eingaben Gelaende
h  <- 200           # Gelaendehoehe in m
sky <- 0.8          # Himmelssichtfaktor (sky view factor 0..1); 1, wenn keine Horizontueberschattung; wenn nicht bekannt, rechnen
hex <- 180          # Expositionswinkel 0 = N, 180° = S
hn <- 20            # Hangneigung in Grad (0...90°)
albedo <- 0.15      # Albedo in 0...1
everything <- radiation_data %>%
mutate(
date = dmy_hm(datetime, tz = "Europe/Berlin"),
ut = hour(date)+minute(date)/60+second(date)/3600,
sh = sh(yday(date), ut, gb, gl),
pressure = pp(Ta_2m, h),
exz = exz(yday(date)),
mr = mr(sh),
ma = ma(mr, pressure),
tlu = tlu(ma),
to3 = to3(mr, oz),
pw = pw(pressure,Ta_2m,h),
twv = twv(pw, mr),
tae = tae(vis, ma),
tgas = tgas(ma),
tges = tlu*to3*tgas*tae*twv,
sol_90 = solconst*exz,
sol_sh = sol_90 * sin(sh*(pi/180)),
sol_hor = sol_sh * tges,
sol_ref = albedo * sol_hor,
sol_bal = sol_hor - sol_ref,
)
View(everything)
radiation_data <- read.csv("../03_Sitzung_3/testdatensatz_radbilanz_wiese_caldern.csv") %>%
na.omit()
################# Notwendige Eingaben Atmosphäre
solconst <- 1367            # Mean solar constatnt W/m²
p <- 1000                   # Air pressure in hPa; wenn bekannt, angeben; sonst unten berechnen
oz <- 0.35                  # average Ozon columnar values 0.35 cm
t <- 20.8                   # Temperatur in °C
vis <- 40                   # horizontale Sichtweite in km
################### Notwendige Eingaben Ort und Zeit
gb <- 50.84050277777778
gl <- 8.683303333333333
################## Eingaben Gelaende
h  <- 200           # Gelaendehoehe in m
sky <- 0.8          # Himmelssichtfaktor (sky view factor 0..1); 1, wenn keine Horizontueberschattung; wenn nicht bekannt, rechnen
hex <- 180          # Expositionswinkel 0 = N, 180° = S
hn <- 20            # Hangneigung in Grad (0...90°)
albedo <- 0.15      # Albedo in 0...1
everything <- radiation_data %>%
mutate(
date = dmy_hm(datetime, tz = "Europe/Berlin"),
ut = hour(date)+minute(date)/60+second(date)/3600,
sh = sh(yday(date), ut, gb, gl),
pressure = pp(Ta_2m, h),
exz = exz(yday(date)),
saz = saz(yday(date), ut, gb, gl),
mr = mr(sh),
ma = ma(mr, pressure),
tlu = tlu(ma),
to3 = to3(mr, oz),
pw = pw(pressure,Ta_2m,h),
twv = twv(pw, mr),
tae = tae(vis, ma),
tgas = tgas(ma),
tges = tlu*to3*tgas*tae*twv,
sol_90 = solconst*exz,
sol_sh = sol_90 * sin(sh*(pi/180)),
sol_hor = sol_sh * tges,
sol_ref = albedo * sol_hor,
sol_bal = sol_hor - sol_ref,
)
View(everything)
ut <- 10.916667
gb <- 50.84050277777778
gl <- 8.683303333333333
doy <- 94
n <- doy
f <- pi/180   # Winkel in Radiant Faktor
#---------------------------Anweisungsteil
gbr <- gb*f
glr <- gl*f
#---------------------------Mittlere Sonnenzeit
t <- ut+gl/15.           # In Stunden
#---------------------------Stundenwinkel in Radiant
m <- 356.6+0.9856*n      # in Grad
m <- m*f                 # in Radiant
zt <- 0.1644*sin(2.*glr) - 0.1277*sin(m) # in Stunden
h <- (15.*f)*(t+zt-12.)  # In Radiant
#---------------------------Scheinb. geoz etc.
del <- 279.3*f+0.9856*f*n+1.92*f*sin(356.6*f+0.9856*f*n) #  in Radiant
#      del=del*f             #  in Radiant
#---------------------------Sinus Deklination der Sonne
sde <- sin(23.44*f)*sin(del)     #  In Radiant
#---------------------------Sonnenh?he
shh <- sin(gbr)*sde+cos(gbr)*cos(asin(sde))*cos(h)
sh <- asin(shh)/f;
f <- pi/180   # Winkel in Radiant Faktor
gbr <- gb*f
glr <- gl*f
#---------------------------Mittlere Sonnenzeit
t <- ut+gl/15.           # In Stunden
#---------------------------Stundenwinkel in Radiant
m <- 356.6+0.9856*n      # in Grad
m <- m*f                 # in Radiant
zt <- 0.1644*sin(2.*glr) - 0.1277*sin(m) # in Stunden
h <- (15.*f)*(t+zt-12.)  # In Radiant
#---------------------------Scheinb. geoz etc.
del <- 279.3*f+0.9856*f*n+1.92*f*sin(356.6*f+0.9856*f*n) #  in Radiant
#      del=del*f             #  in Radiant
#---------------------------Sinus Deklination der Sonne
sde <- sin(23.44*f)*sin(del)     #  In Radiant
saz=(sde*cos(gbr)-cos(asin(sde))*sin(gbr)*cos(h))/cos(shh)
saz=acos(saz)
saz <- saz/f;
library(lubridate)
library(dplyr)
source("../00_Toolbox/solar_IR_rad_functions.R")
radiation_data <- read.csv("../03_Sitzung_3/testdatensatz_radbilanz_wiese_caldern.csv") %>%
na.omit()
################# Notwendige Eingaben Atmosphäre
solconst <- 1367            # Mean solar constatnt W/m²
p <- 1000                   # Air pressure in hPa; wenn bekannt, angeben; sonst unten berechnen
oz <- 0.35                  # average Ozon columnar values 0.35 cm
t <- 20.8                   # Temperatur in °C
vis <- 40                   # horizontale Sichtweite in km
################### Notwendige Eingaben Ort und Zeit
gb <- 50.84050277777778
gl <- 8.683303333333333
################## Eingaben Gelaende
h  <- 200           # Gelaendehoehe in m
sky <- 0.8          # Himmelssichtfaktor (sky view factor 0..1); 1, wenn keine Horizontueberschattung; wenn nicht bekannt, rechnen
hex <- 180          # Expositionswinkel 0 = N, 180° = S
hn <- 20            # Hangneigung in Grad (0...90°)
albedo <- 0.15      # Albedo in 0...1
everything <- radiation_data %>%
mutate(
date = dmy_hm(datetime, tz = "Europe/Berlin"),
ut = hour(date)+minute(date)/60+second(date)/3600,
sh = sh(yday(date), ut, gb, gl),
pressure = pp(Ta_2m, h),
exz = exz(yday(date)),
saz = saz(yday(date), ut, gb, gl),
mr = mr(sh),
ma = ma(mr, pressure),
tlu = tlu(ma),
to3 = to3(mr, oz),
pw = pw(pressure,Ta_2m,h),
twv = twv(pw, mr),
tae = tae(vis, ma),
tgas = tgas(ma),
tges = tlu*to3*tgas*tae*twv,
sol_90 = solconst*exz,
sol_sh = sol_90 * sin(sh*(pi/180)),
sol_hor = sol_sh * tges,
sol_ref = albedo * sol_hor,
sol_bal = sol_hor - sol_ref,
)
View(everything)
yday(everything$date)
n <- 185
ut <- 4.25
gb <- 50.84050277777778
gl <- 8.683303333333333
f <- pi/180
everything <- radiation_data %>%
mutate(
date = dmy_hm(datetime, tz = "Europe/Berlin"),
ut = hour(date)+minute(date)/60+second(date)/3600,
sh = sh(yday(date), ut, gb, gl),
pressure = pp(Ta_2m, h),
exz = exz(yday(date)),
saz = saz(yday(date), ut, gb, gl, sh*f),
mr = mr(sh),
ma = ma(mr, pressure),
tlu = tlu(ma),
to3 = to3(mr, oz),
pw = pw(pressure,Ta_2m,h),
twv = twv(pw, mr),
tae = tae(vis, ma),
tgas = tgas(ma),
tges = tlu*to3*tgas*tae*twv,
sol_90 = solconst*exz,
sol_sh = sol_90 * sin(sh*(pi/180)),
sol_hor = sol_sh * tges,
sol_ref = albedo * sol_hor,
sol_bal = sol_hor - sol_ref,
)
radiation_data <- read.csv("../03_Sitzung_3/testdatensatz_radbilanz_wiese_caldern.csv") %>%
na.omit()
################# Notwendige Eingaben Atmosphäre
solconst <- 1367            # Mean solar constatnt W/m²
p <- 1000                   # Air pressure in hPa; wenn bekannt, angeben; sonst unten berechnen
oz <- 0.35                  # average Ozon columnar values 0.35 cm
t <- 20.8                   # Temperatur in °C
vis <- 40                   # horizontale Sichtweite in km
################### Notwendige Eingaben Ort und Zeit
gb <- 50.84050277777778
gl <- 8.683303333333333
################## Eingaben Gelaende
h  <- 200           # Gelaendehoehe in m
sky <- 0.8          # Himmelssichtfaktor (sky view factor 0..1); 1, wenn keine Horizontueberschattung; wenn nicht bekannt, rechnen
hex <- 180          # Expositionswinkel 0 = N, 180° = S
hn <- 20            # Hangneigung in Grad (0...90°)
albedo <- 0.15      # Albedo in 0...1
f <- pi/180
everything <- radiation_data %>%
mutate(
date = dmy_hm(datetime, tz = "Europe/Berlin"),
ut = hour(date)+minute(date)/60+second(date)/3600,
sh = sh(yday(date), ut, gb, gl),
pressure = pp(Ta_2m, h),
exz = exz(yday(date)),
saz = saz(yday(date), ut, gb, gl, (sh*f)),
mr = mr(sh),
ma = ma(mr, pressure),
tlu = tlu(ma),
to3 = to3(mr, oz),
pw = pw(pressure,Ta_2m,h),
twv = twv(pw, mr),
tae = tae(vis, ma),
tgas = tgas(ma),
tges = tlu*to3*tgas*tae*twv,
sol_90 = solconst*exz,
sol_sh = sol_90 * sin(sh*(pi/180)),
sol_hor = sol_sh * tges,
sol_ref = albedo * sol_hor,
sol_bal = sol_hor - sol_ref,
)
### Function Sonnenazimuth
saz <- function(n,ut,gb,gl, shh) {
f <- pi/180   # Winkel in Radiant Faktor
gbr <- gb*f
glr <- gl*f
#---------------------------Mittlere Sonnenzeit
t <- ut+gl/15.           # In Stunden
#---------------------------Stundenwinkel in Radiant
m <- 356.6+0.9856*n      # in Grad
m <- m*f                 # in Radiant
zt <- 0.1644*sin(2.*glr) - 0.1277*sin(m) # in Stunden
h <- (15.*f)*(t+zt-12.)  # In Radiant
#---------------------------Scheinb. geoz etc.
del <- 279.3*f+0.9856*f*n+1.92*f*sin(356.6*f+0.9856*f*n) #  in Radiant
#      del=del*f             #  in Radiant
#---------------------------Sinus Deklination der Sonne
sde <- sin(23.44*f)*sin(del)     #  In Radiant
#---------------------------Sonnenazimut
if(t <= 12) {
saz=(sde*cos(gbr)-cos(asin(sde))*sin(gbr)*cos(h))/cos(shh)
saz=acos(saz)
} else {
saz=(sde*cos(gbr)-cos(asin(sde))*sin(gbr)*cos(h))/cos(shh)
saz=360.*f-acos(saz) }
saz <- saz/f;
return(saz)
}
radiation_data <- read.csv("../03_Sitzung_3/testdatensatz_radbilanz_wiese_caldern.csv") %>%
na.omit()
################# Notwendige Eingaben Atmosphäre
solconst <- 1367            # Mean solar constatnt W/m²
p <- 1000                   # Air pressure in hPa; wenn bekannt, angeben; sonst unten berechnen
oz <- 0.35                  # average Ozon columnar values 0.35 cm
t <- 20.8                   # Temperatur in °C
vis <- 40                   # horizontale Sichtweite in km
################### Notwendige Eingaben Ort und Zeit
gb <- 50.84050277777778
gl <- 8.683303333333333
################## Eingaben Gelaende
h  <- 200           # Gelaendehoehe in m
sky <- 0.8          # Himmelssichtfaktor (sky view factor 0..1); 1, wenn keine Horizontueberschattung; wenn nicht bekannt, rechnen
hex <- 180          # Expositionswinkel 0 = N, 180° = S
hn <- 20            # Hangneigung in Grad (0...90°)
albedo <- 0.15      # Albedo in 0...1
f <- pi/180
everything <- radiation_data %>%
mutate(
date = dmy_hm(datetime, tz = "Europe/Berlin"),
ut = hour(date)+minute(date)/60+second(date)/3600,
sh = sh(yday(date), ut, gb, gl),
pressure = pp(Ta_2m, h),
exz = exz(yday(date)),
saz = saz(yday(date), ut, gb, gl, (sh*f)),
mr = mr(sh),
ma = ma(mr, pressure),
tlu = tlu(ma),
to3 = to3(mr, oz),
pw = pw(pressure,Ta_2m,h),
twv = twv(pw, mr),
tae = tae(vis, ma),
tgas = tgas(ma),
tges = tlu*to3*tgas*tae*twv,
sol_90 = solconst*exz,
sol_sh = sol_90 * sin(sh*(pi/180)),
sol_hor = sol_sh * tges,
sol_ref = albedo * sol_hor,
sol_bal = sol_hor - sol_ref,
)
?ifelse
### Function Sonnenazimuth
saz <- function(n,ut,gb,gl, shh) {
f <- pi/180   # Winkel in Radiant Faktor
gbr <- gb*f
glr <- gl*f
#---------------------------Mittlere Sonnenzeit
t <- ut+gl/15.           # In Stunden
#---------------------------Stundenwinkel in Radiant
m <- 356.6+0.9856*n      # in Grad
m <- m*f                 # in Radiant
zt <- 0.1644*sin(2.*glr) - 0.1277*sin(m) # in Stunden
h <- (15.*f)*(t+zt-12.)  # In Radiant
#---------------------------Scheinb. geoz etc.
del <- 279.3*f+0.9856*f*n+1.92*f*sin(356.6*f+0.9856*f*n) #  in Radiant
#      del=del*f             #  in Radiant
#---------------------------Sinus Deklination der Sonne
sde <- sin(23.44*f)*sin(del)     #  In Radiant
#---------------------------Sonnenazimut
saz <- (sde*cos(gbr)-cos(asin(sde))*sin(gbr)*cos(h))/cos(shh)
saz <- ifelse(t <=12, acos(saz), 360*f-acos(saz))
saz <- saz/f
return(saz)
}
radiation_data <- read.csv("../03_Sitzung_3/testdatensatz_radbilanz_wiese_caldern.csv") %>%
na.omit()
################# Notwendige Eingaben Atmosphäre
solconst <- 1367            # Mean solar constatnt W/m²
p <- 1000                   # Air pressure in hPa; wenn bekannt, angeben; sonst unten berechnen
oz <- 0.35                  # average Ozon columnar values 0.35 cm
t <- 20.8                   # Temperatur in °C
vis <- 40                   # horizontale Sichtweite in km
################### Notwendige Eingaben Ort und Zeit
gb <- 50.84050277777778
gl <- 8.683303333333333
################## Eingaben Gelaende
h  <- 200           # Gelaendehoehe in m
sky <- 0.8          # Himmelssichtfaktor (sky view factor 0..1); 1, wenn keine Horizontueberschattung; wenn nicht bekannt, rechnen
hex <- 180          # Expositionswinkel 0 = N, 180° = S
hn <- 20            # Hangneigung in Grad (0...90°)
albedo <- 0.15      # Albedo in 0...1
f <- pi/180
everything <- radiation_data %>%
mutate(
date = dmy_hm(datetime, tz = "Europe/Berlin"),
ut = hour(date)+minute(date)/60+second(date)/3600,
sh = sh(yday(date), ut, gb, gl),
pressure = pp(Ta_2m, h),
exz = exz(yday(date)),
saz = saz(yday(date), ut, gb, gl, (sh*f)),
mr = mr(sh),
ma = ma(mr, pressure),
tlu = tlu(ma),
to3 = to3(mr, oz),
pw = pw(pressure,Ta_2m,h),
twv = twv(pw, mr),
tae = tae(vis, ma),
tgas = tgas(ma),
tges = tlu*to3*tgas*tae*twv,
sol_90 = solconst*exz,
sol_sh = sol_90 * sin(sh*(pi/180)),
sol_hor = sol_sh * tges,
sol_ref = albedo * sol_hor,
sol_bal = sol_hor - sol_ref,
)
usethis::use_r("radiation")
az <- c(0,45,90,135,180,225,270,315)
th <- c(25, 30, 30, 11, 12, 17, 15 ,10)
dist <- c(154.6, 84.5, 64.0, 47.7, 66.7, 55.6, 34.0, 32.0)
nl <- length(az)
az <- c(0,45,90,135,180,225,270,315)
th <- c(25, 30, 30, 11, 12, 17, 15 ,10)
dist <- c(154.6, 84.5, 64.0, 47.7, 66.7, 55.6, 34.0, 32.0)
nl <- length(az)
s_al <- vector(mode="numeric", length = nl)
sky_vaz <- vector(mode="numeric", length = nl)
s_al <- asin(th/dist)   # sin(alpha) nach Pythagoras
az <- c(0,45,90,135,180,225,270,315)
th <- c(25, 30, 30, 11, 12, 17, 15 ,10)
dist <- c(154.6, 84.5, 64.0, 47.7, 66.7, 55.6, 34.0, 32.0)
nl <- length(az)
s_al <- asin(th/dist)   # sin(alpha) nach Pythagoras
sky_vaz <- (1-cos(s_al))
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
?lw_emissivity_air
usethis
usethis::use_r("latent")
usethis::use_r("sensible")
devtools::load_all()
surface_properties
#' "Wiese", "Acker", "Gruenflaeche", "Strasse", "Landwirtschaft", "Siedlung", "Nadelwald", "Laubwald", "Mischwald", "Stadt"
#' You need to specify only one, "type" OR "obs_height".
#'
#' @param surface_type Type of underground.
#' @param obs_height Height of obstacle in m.
#'
#' @return Roughness length in m.
#' @export
#'
#' @examples
turb_roughness_length <- function(surface_type = NULL, obs_height = NULL){
if(is.null(obs_height)==F){z0 <- obs_height*0.1}
else if(is.null(surface_type)==F && is.null(obs_height)){
z0 <- surface_properties[surface_type==surface_type]$roughness_length
}
else if(is.null(surface_type)==F && is.null(obs_height)==F){z0 <- NA}
if((is.null(surface_type) && is.null(obs_height)) || (is.null(surface_type)==F && is.null(obs_height)==F)){
return("Please specify the type of the surface OR the obs_height")
}
if(is.null(surface_type)==F){
if(type == "Wiese" || type == "Weide"){z0 = 0.02}
else if(type == "Acker" || type == "Sportplatz"){z0 = 0.05}
else if(type == "Strasse" || type == "Gruenflaeche" || type == "Landwirtschaft"){z0 = 0.2}
else if(type == "Siedlung" || type == "Nadelwald"){z0 = 1.0}
else if(type == "Laubwald" || type == "Mischwald"){z0 = 1.5}
else if(type == "Stadt"){z0 = 2.0}}
else if(is.null(obs_height)==F){z0 <- obs_height*0.1}
return(z0)
}
if(is.null(obs_height)==F){z0 <- obs_height*0.1}
#' "Wiese", "Acker", "Gruenflaeche", "Strasse", "Landwirtschaft", "Siedlung", "Nadelwald", "Laubwald", "Mischwald", "Stadt"
#' You need to specify only one, "type" OR "obs_height".
#'
#' @param surface_type Type of underground.
#' @param obs_height Height of obstacle in m.
#'
#' @return Roughness length in m.
#' @export
#'
#' @examples
turb_roughness_length <- function(surface_type = NULL, obs_height = NULL){
if(is.null(obs_height)==F){z0 <- obs_height*0.1}
else if(is.null(surface_type)==F && is.null(obs_height)){
z0 <- surface_properties[surface_type==surface_type]$roughness_length
}
else if(is.null(surface_type)==F && is.null(obs_height)==F){z0 <- NA}
}
turb_roughness_length("Wiese")
#' "Wiese", "Acker", "Gruenflaeche", "Strasse", "Landwirtschaft", "Siedlung", "Nadelwald", "Laubwald", "Mischwald", "Stadt"
#' You need to specify only one, "type" OR "obs_height".
#'
#' @param surface_type Type of underground.
#' @param obs_height Height of obstacle in m.
#'
#' @return Roughness length in m.
#' @export
#'
#' @examples
turb_roughness_length <- function(surface_type = NULL, obs_height = NULL){
if(is.null(obs_height)==F){z0 <- obs_height*0.1}
else if(is.null(surface_type)==F && is.null(obs_height)){
z0 <- surface_properties[surface_type==surface_type]$roughness_length
}
else if(is.null(surface_type)==F && is.null(obs_height)==F){z0 <- NA}
return(z0)
}
turb_roughness_length("Wiese")
z0 <- surface_properties[surface_properties$surface_type==surface_type]$roughness_length
#' "Wiese", "Acker", "Gruenflaeche", "Strasse", "Landwirtschaft", "Siedlung", "Nadelwald", "Laubwald", "Mischwald", "Stadt"
#' You need to specify only one, "type" OR "obs_height".
#'
#' @param surface_type Type of underground.
#' @param obs_height Height of obstacle in m.
#'
#' @return Roughness length in m.
#' @export
#'
#' @examples
turb_roughness_length <- function(surface_type = NULL, obs_height = NULL){
if(is.null(obs_height)==F){z0 <- obs_height*0.1}
else if(is.null(surface_type)==F && is.null(obs_height)){
z0 <- surface_properties[surface_properties$surface_type==surface_type]$roughness_length
}
else if(is.null(surface_type)==F && is.null(obs_height)==F){z0 <- NA}
return(z0)
}
turb_roughness_length("Wiese")
turb_roughness_length(surface_type = "Wiese")
surface_type <- "Wiese"
surface_properties[surface_properties$surface_type==surface_type]$roughness_length
surface_properties[surface_properties$surface_type=="Wiese"]$roughness_length
surface_properties[which(surface_properties$surface_type==surface_type),]$roughness_length
#' "Wiese", "Acker", "Gruenflaeche", "Strasse", "Landwirtschaft", "Siedlung", "Nadelwald", "Laubwald", "Mischwald", "Stadt"
#' You need to specify only one, "type" OR "obs_height".
#'
#' @param surface_type Type of underground.
#' @param obs_height Height of obstacle in m.
#'
#' @return Roughness length in m.
#' @export
#'
#' @examples
turb_roughness_length <- function(surface_type = NULL, obs_height = NULL){
if(is.null(obs_height)==F){z0 <- obs_height*0.1}
else if(is.null(surface_type)==F && is.null(obs_height)){
z0 <- surface_properties[which(surface_properties$surface_type==surface_type),]$roughness_length
}
else if(is.null(surface_type)==F && is.null(obs_height)==F){z0 <- NA}
return(z0)
}
rm(surfa#e)
rm(surface_type)
turb_roughness_length("Wiese")
turb_roughness_length("Stadt")
turb_roughness_length("Stadt", 2)
turb_roughness_length(2)
turb_roughness_length(obs_height = 2)
surface_properties[,"surface_type"]
test <- surface_properties[,"surface_type"]
